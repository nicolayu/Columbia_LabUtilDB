#######FixDatabase.R

# Fix database
data.table(dbGetQuery(pool,'SELECT * from Refs'))->Refs
# save(Refs,file='originalRefs.rda')
data.table(dbGetQuery(pool,'SELECT * from InstitutionType'))->IT
data.table(dbGetQuery(pool,'SELECT * FROM RefInst'))->RefInst
setkey(IT,Institution_Type)
Refs[,Institution:=IT[Institution,InstTypeID]]
Refs[,.(Institution)]
rm(IT)
dbWriteTable(pool,'Refs',Refs,overwrite=TRUE)

dbGetQuery(pool,'SELECT refID, Institution from Refs JOIN RefInst ON refID = Refs_RefID WHERE refID = 647')
dbGetQuery(pool,'SELECT * FROM RefInst JOIN InstitutionType ON InstTypeID = InstitutionType_InstTypeID WHERE Refs_RefID = 647')

dbGetQuery(pool,'SELECT refID, Institution FROM Refs')
dbGetQuery(
  pool,'SELECT Patient_Type 
    FROM PatientType 
    
    '
)





#########global.R
# global file for LabUtilDb on AWS
library(data.table)
library(DT)
library(icd)
library(RefManageR)
library(reshape2)
library(rhandsontable)
library(mailR)
library(pool)
library(RMySQL)
library(sodium)
# library(shinyjs)
source('secrets.R')
options(stringsAsFactors = FALSE)
authize <- function(author){
  if(!length(author) | is.na(author)){return(NA)}
  if(substr(author,1,1)=="{")
    return(substr(author,2,as.numeric(gregexpr("\\}",author))-1))
  else{
    au1 <- unlist(strsplit(author," and "))[1]
    ausplit <- unlist(strsplit(au1," "))
    if(length(grep("\\{",ausplit))){
      auint <- gsub("\\{|\\}","",paste0(
        ausplit[grep("\\{",ausplit):grep("\\}",ausplit)],collapse=" "))
      ausplit <- c(ausplit[1:(grep("\\{",ausplit)-1)],auint)
    }
    lenau <- length(ausplit)
    aulast <- paste0(ausplit[lenau],ifelse(lenau>1,", ",""))
    aufirst <- substr(ifelse(lenau>1,ausplit[1],""),1,1)
    ausecond <- substr(ifelse(lenau>2,ausplit[2],""),1,1)
    return(paste0(aulast,aufirst,ausecond)) 
  }
}
testdb <- as.data.table(dbReadTable(pool,'TestNames'))[order(TestName)]
LUfields = Hmisc::Cs(Required_Condition, Negative_Condition, Min_Interval_Normal_d, Min_Interval_Normal_Comment, Min_Interval_Abnormal_d, Min_Interval_Abnormal_Comment, 
   Recommended_interval_d, Recommended_Interval_Comment, Comments, Max_Collect_test_h, Max_collect_test_comment, Clinical_Free_Text, icd10, PtType, utilID,
   testID,Last_Modified_by,Date_modified) # `References`,

# Test2testid <- function(Test) LabUtilDb$TestNames[TEST==Test,testID]
pmidLink <- function(pmid) {
  sprintf('<a href="https://www.ncbi.nlm.nih.gov/pubmed/%s" target="_blank" class="btn btn-primary">%s</a>',pmid,pmid)
}
isValidEmail <- function(x) {
  grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
}
createLink <- function(link) {
  if(link=="" | nchar(link)<10) {
    '<a class="btn btn-primary">NA</a>'
  }else{
    sprintf('<a href="%s" target="_blank" class="btn btn-primary">Go</a>',link)
  }
}

# edfi <- data.table(
#   input=c("Affiliation","Department","Institution","Division",
#           "Study Type","Title","Authors","Abstract","Comment","Choosing Wisely","URL"),
#   reffield=c('affiliation',"Department","Institution","Division",
#              "Study","title","author","abstract","Comment","ChoosingWisely","url"),
#   labufield=c(NA,"Departments","InstitutionType","Divisions",
#               "StudyType",NA,NA,NA,NA,NA,NA))

RefManageR::BibOptions(bib.style='authoryear',first.inits=FALSE,style='html')
reffields <- dbListFields(pool,'Refs')
edfi <- data.table(
  # type = c(rep(3,4),1,2,rep(0,6)),
  name=c('Departments','Divisions','Institution Type'), # names to be listed on pull-downs, labels, etc
  looktable=c('Departments','Divisions','InstitutionType'), # lookup tables
  sortfield=c('Sort',NA,'Sort'), # field to sort dysplay
  lookfield=c('Department','Division','Institution_Type'), # field in lookup table for dysplay
  lookidx = c('DeptID','divID','InstTypeID'), # index field in lookup table for matching
  sandtable=c('RefDept','RefDivision','RefInst'), # sandwich tables
  sandlookfield=c('DeptID','divID','InstitutionType_InstTypeID'), # sandwich field for matching lookup table
  sandreffield=c('Refs_RefID','RefId','Refs_RefID')  # sandwich field for matching referenced table
)
lookup = data.table(
  name=c('Study Type'),
  table=c('StudyType'),
  field=c('StudyType')
)

inputFields = data.table(
  name=c("Title","Authors","Abstract","Comment","Choosing Wisely","URL",'Affilitations','Departments','Divisions','Institution Type'),
  field=c("Title","Authors","Abstract","Comment","Choosing_Wisely","url",'Departments','Divisions','Institution Type'))

bibfield = data.table(name=c('Year','Month','Journal','Volume','Number','Pages','Affiliations'))

returnTextInput <- function(inputId, label, value = "") {
  tagList(
    singleton(tags$head(tags$script(src = "returnTextInputBinding.js"))),
    tags$label(label, `for` = inputId),
    tags$input(id = inputId, type = "text", value = value, class = "returnTextInput")
  )
}

truthy <- function(x,y=FALSE)
  ifelse(isTruthy(x),x,y)

shiny::onStop(function() {
  poolClose(pool)
})



################modelCrud.R
library(shiny)
library(shinyjs)
library(DT)
library(data.table)
library(DBI)
library(pool)

#Database
pool <- dbPool(drv =RSQLite::SQLite(),dbname="")
onStop(function() {
  poolClose(pool)
})

dbGetQuery(pool,"CREATE TABLE customer(customer_first TEXT, customer_last TEXT, gender TEXT,dob TEXT);")

dbGetQuery(pool, 'INSERT INTO customer (customer_first, customer_last, gender, dob) 
       VALUES ("Amit","Kumar","male","1988-01-01");')

dbGetQuery(pool, 'INSERT INTO customer (customer_first, customer_last, gender, dob) 
       VALUES ("Bhatia","Krouz","male","1975-01-01");')
#SQLlite create and use rowid as default auto_increament id
#Example
#dbGetQuery(pool, 'SELECT * FROM customer where rowid=1')
#dbGetQuery(pool, 'SELECT rowid FROM customer where customer_last="Kumar"')

#App
shinyApp(
  ui = fluidPage(
    shinyjs::useShinyjs(),
    sidebarLayout(
      sidebarPanel(
        conditionalPanel(
          condition="input.conditionedPanels == 0",helpText("This is About")),
        conditionalPanel(
          condition="input.conditionedPanels == 1",
          textInput("customer_first", "First Name", ""),
          textInput("customer_last", "Last Name", ""),
          selectInput(
            inputId="gender" ,"1. Gender" , 
            choices=c("Male"=0,"Female"=1) , selected =0, selectize=FALSE) ,
          dateInput("dob","Date of birth:",value="1980-01-01",format="yyyy-mm-dd"),
          actionButton("submit", "Create")
        ),
        
        conditionalPanel(
          condition="input.conditionedPanels == 2",
          div(id="abu",
              textInput("customer_first_s", "First Name", ""),
              textInput("customer_last_s", "Last Name", ""),
              dateInput("dob_s","Date:",value = "",format = "yyyy-mm-dd")),
          actionButton("search", "Search"))
      ), #sidebarPanel
      
      mainPanel(tabsetPanel(
        id="conditionedPanels",
        tabPanel("About",value=0,h3("About the application")),
        navbarMenu(
          "CRM",
          tabPanel("New Customer", value=1,br(),br(),
                   p("Please save the customer ID for future reference. In case customer id has been lost then please use the customer patient panel for search.")),
          tabPanel("Existing Customer",value=2,DT::dataTableOutput("res"))
                            ) #navbarMenu
                            
      ) #tabSetPanel
      
      ,
      tags$script("$(document).on('click', '#res button', function () {
              Shiny.onInputChange('lastClickId',this.id);
              Shiny.onInputChange('lastClick', Math.random())
              });")) #mainPanel
      
      
    )), #ui
  server = function(input, output, session) {
    
    observeEvent(input$submit, {
      tryCatch(
        poolWithTransaction(pool, function (conn) {
          dbExecute(
            conn,paste0(
              "INSERT INTO customer (customer_first, customer_last, gender, dob) values ",
              "('",input$customer_first,"','",input$customer_last,"',",
              input$gender,",'",input$dob,"')", ";")
            )
          id <- dbGetQuery(conn, "select last_insert_rowid();")[1,1]
          showModal(modalDialog(
            title = "Record created successfully",
            span('New customer record was created with ID:',strong(em(id)))
          ))
        }), 
        error = function(e){
          showModal(modalDialog(
            title = "Create new record not successful",
            tags$i("Please enter valid values and try again"),br(),br(),
            tags$b("Error:"),br(),
            tags$code(e$message)
          ))
        })
      reset("customer_first");reset("customer_last") #reset from shinyjs
    })
    
    
    select_dat <- eventReactive(
      input$search,
      dbGetQuery(pool,paste0(
        "select rowid AS 'Customer ID', customer_first AS 'First name' , customer_last 'Last name', dob AS DOB from customer where customer_first like","'%",
        ifelse(input$customer_first_s=="","^",input$customer_first_s),"%'",
        " OR customer_last like","'%",
        ifelse(input$customer_last_s=="","^",input$customer_last_s),
        "%'"," OR dob like","'",input$dob_s,"'",";"))
    )
    
    values = reactiveValues(data=NULL)
    observe({
      input$search
      values$data <- select_dat()
    })
    
    
    output$res <- DT::renderDataTable({
      req(values$data)
      DT <- values$data
      if (nrow(DT) >= 1) {
        
        DT[["Actions"]]   <-
          paste0('
             <div class="btn-group" role="group" aria-label="Basic example">
             <button type="button" class="btn btn-secondary delete" id=delete_',1:nrow(DT),'>Delete</button>
             <button type="button" class="btn btn-secondary modify"id=modify_',1:nrow(DT),'>Modify</button>
             </div>
             ')
        } else {return(DT)}
      datatable(DT,escape=F,selection="none",options = list(columnDefs = list(list(className = 'dt-center',targets=1:5))))})
    
    output$row_modif<-renderDataTable({
      selected_row=as.numeric(gsub("modify_","",input$lastClickId))
      #start from 2nd coulmn Because I don't want user has access to the ID
      old_row= values$data[selected_row,2:4]
      row_change=list()
      for (i in colnames(old_row))
      {
        if (is.numeric(old_row[[i]]))
        {
          row_change[[i]]<-paste0('<input class="new_input" type="number" id=new_',i,'><br>')
        }
        else
          row_change[[i]]<-paste0('<input class="new_input" type="text" id=new_',i,'><br>')
      }
      
      row_change=as.data.table(row_change)
      setnames(row_change,colnames(old_row))
      DT=rbind(old_row,row_change)
      rownames(DT)<-c("Current values","New values")
      DT
    },escape=F,options=list(dom='t',ordering=F),selection="none")
    
    
    ##Managing in row deletion
    modal_modify<-modalDialog(
      fluidPage(
        h3(strong("Record modification"),align="center"),
        hr(),
        dataTableOutput('row_modif'),
        actionButton("save_changes","Save changes"),
        
        tags$script(HTML("$(document).on('click', '#save_changes', function () {
                     var list_value=[]
                     for (i = 0; i < $( '.new_input' ).length; i++)
                     {
                     list_value.push($( '.new_input' )[i].value)
                     }
                     Shiny.onInputChange('newValue', list_value)
  });"))
      ),size="l")
    
    observeEvent(input$newValue,{
      newValue=lapply(input$newValue, function(col) {
        if (suppressWarnings(all(!is.na(as.numeric(as.character(col)))))) {
          as.numeric(as.character(col))
        } else {
          col
        }
      })
      DF=data.frame(lapply(newValue, function(x) t(data.frame(x))))
      id_row <- values$data[as.numeric(gsub("modify_","",input$lastClickId)),1]
      query <- sqlInterpolate(pool,"update customer set customer_first=?f,customer_last=?l,dob=?d where rowid=?id;",f=as.character(DF[1,1]),l=as.character(DF[1,2]),d=as.character(DF[1,3]),id=id_row)
      
      if(!isTruthy(tryCatch(dbGetQuery(pool,query), error=function(e) NA))){
        showModal(
          modalDialog(
            title = "Unvalid Modification",
            "Please enter non null values", easyClose = TRUE, footer = NULL
          )
        )
        return()
      }
      dbGetQuery(pool,query) 
      values$data[as.numeric(gsub("modify_","",input$lastClickId)),2:4]<- c(as.character(DF[1,1]),as.character(DF[1,2]),as.character(DF[1,3]))
      
    })
    
    
    observeEvent(input$lastClick,
                 {
                   if (input$lastClickId%like%"delete")
                   {
                     row_to_del=as.numeric(gsub("delete_","",input$lastClickId))
                     query <- sqlInterpolate(pool,"delete from customer where rowid=?id;",id=values$data[row_to_del,1])
                     
                     if(!isTruthy(tryCatch(dbGetQuery(pool,query), error=function(e) NA))){
                       showModal(
                         modalDialog(
                           title = "Unvalid Deletion",
                           "Delete customer record who has sales record is prohibited", easyClose = TRUE, footer = NULL
                         )
                       )
                       return()
                     }
                     
                     dbGetQuery(pool,query) 
                     values$data=values$data[-row_to_del,]
                     
                   }
                   else if (input$lastClickId%like%"modify")
                   {
                     showModal(modal_modify)
                   }
                 }
    )
    
    
    
  }
)




##############secrets.R
# secrets: careful not to share#
pool <- dbPool(
  drv = MySQL(),
  username ='testdbuser',
  password ='F3hbCFkH6I11', # fix for production
  dbname='testdb',
  # host= 'testdb1.cres09btkks6.us-east-2.rds.amazonaws.com',
  host= 'labutildb.clmui8yfxppb.us-east-2.rds.amazonaws.com',
  port=3306
)

emailuser <- "labutildb@gmail.com"
emailpsswd <- "aNnFV0Z3T8An"




#############server.R
# server function for LabUtilDb on AWS 
shinyServer(function(session, input, output) {
  # Lab=reactiveValues(U=LabUtilDb)
  ####### user management #######
  Users <- data.table(dbReadTable(pool,'Users'))
  user <- reactiveValues(name="jls",pin='3340',edit=FALSE,logged=FALSE,newaffi="",first="",last="",newemail="") # remove jls in production
  logModal <- function(usr){
    modalDialog(
      title='Hello, please login',
      fluidPage(
        textInput('userName','User Name (mandatory):',value = usr), 
        passwordInput('pin','Password:',placeholder = '****')
      ),
      footer = tagList(
        actionButton('userok',"OK"))
    )
  }
  isolate(showModal(logModal(user$name))) # initial log in
  observeEvent(input$userok,{ # respond to OK on logModal
    req(input$userName,TRUE)
    user$name <- truthy(tolower(input$userName),user$name)
    user$pin <- truthy(input$pin,user$pin)
    user$logged <- TRUE
    if(user$name%in%(dbGetQuery(pool,'SELECT UserName FROM Users')$UserName)){ # user in database
      user$edit <- FALSE
      try(
        user$edit <-password_verify(dbGetQuery(pool,paste0(
          'SELECT pin FROM Users WHERE UserName = "', user$name,'";'))$pin,user$pin)
      )
      removeModal() 
      # showModal(loggedModal(user$edit)) # notification
    } # end if user in datadase
    else{ # user not in database
      user$pin <- ""
      user$edit <- FALSE
      showModal(modalDialog(
        title='Please enter new user information',
        fluidPage(
          textInput('newuser','Please enter a username (mandatory)',value = user$name),
          textInput('first','Please enter your first name'),
          textInput('last','Please enter your last name'),
          textInput('newaffi','Please enter your affiliation'),
          textInput('newemail','Please enter your email (mandatory for editing privileges)',value=user$newemail)
        ),
        footer = tagList(
          actionButton('newuserok',"Add new user")))) # end UI newuser modal
    } # end else (user not in database)
    output$user <- renderTable({
      Users <- data.table(dbReadTable(pool,'Users'))
      Users[UserName==user$name,.(
        `First Name`=First,
        `Last Name`= Last,
        Affiliation,email,UserName,
        `Edit Privileges`=ifelse(user$edit,"Yes","No"))]
    })
  }) # end input$userok
  
  observeEvent(input$newuserok,{
    req(input$userName,TRUE)
    user$name <- truthy(input$newuser,user$name)
    user$first <- truthy(input$first,user$name)
    user$last <- truthy(input$last,user$last)
    user$newaffi <- truthy(input$newaffi,user$newaffi)
    user$newemail <- truthy(input$newemail,user$newemail)
    user$pin <- NA
    if(isValidEmail(user$newemail)){ #nchar(input$Name)>1 &
      # code to email pin
      user$pin <- as.character(paste(sample( 0:9, 4, replace=TRUE ), collapse="" )) # generate user pin
      sender <- "labutildbR@gmail.com"
      recipients <- user$newemail
      send.mail(from = sender,
                to = recipients,
                subject = "Your pin for Lab Utilization Database",
                body = paste0("Hi, ",user$name,". Please enter the following initial password:",user$pin),
                smtp = list(host.name = "smtp.gmail.com", port = 465,
                            user.name = emailuser,
                            passwd = emailpsswd, ssl = TRUE),
                authenticate = TRUE,
                send = TRUE)
    } # end if isvalidemail
    # add User to table
    # Users <- data.table(dbReadTable(pool,'Users'))
    dbGetQuery(
      pool,
      paste0('INSERT INTO Users (UserName, Affiliation, email, pin, First, Last) VALUES("',
             user$name,'","',user$newaffi,'","',user$newemail,'","',
             ifelse(isTruthy(user$pin),password_store(user$pin),""),'","',user$first,
             '","',user$last,'");')
    )
    user$pin <- NA
    showModal(modalDialog("User added"))
    # Users <- data.table(dbReadTable(pool,'Users'))
    showModal(logModal(user$name))
  }) # end newuserdone observer
  
  observeEvent(input$logout,{
    user$name <- ""
    user$pin <- '****'
    user$edit <- FALSE
    user$logged <- FALSE
    user$newemail <- ""
    user$newaffi <- ""
    showModal(logModal(user$name))
  })
  observeEvent(input$chpswd,{
    if(!user$edit)
      return()
    showModal(modalDialog(
      fluidPage(
        fluidRow(passwordInput('newpsw1','Enter password')),
        fluidRow(passwordInput('newpsw2','Re-enter password'))),
      footer =
        tagList(
          modalButton('Cancel'),
          actionButton("newpswok", "OK"))
    ))
  })
  observeEvent(input$newpswok,{
    req(input$newpsw1,input$newpsw2)
    if (input$newpsw2!=input$newpsw1){
      showModal(modalDialog('Passwords differ; please redo'))
      return()
    }else{
      dbGetQuery(pool,paste0(
        'UPDATE Users SET pin = "',password_store(input$newpsw2), '" WHERE UserName = "',user$name,'";'))
      showModal(modalDialog('Passwords changed'))
      showModal(logModal(user$name))
    }
  }) # end newpswok observer
  observe({
    if(!user$logged)
      user$name <- ""
    output$user <- renderTable(
      Users[UserName==user$name,.(
        `First Name`=First,
        `Last Name`= Last,
        Affiliation,email,UserName,
        `Edit Privileges`=ifelse(user$edit,"Yes","No"))])                                 
  })
  ############################## end user management ##################################################
  # create detailinfo reactive ####
  detailinfo <- reactiveValues(refid=NA,test=NA,utilid=NA) # refid, testid, and utilid
  # render all references table output$Refs #####
  refsdt <- as.data.table(dbReadTable(pool,'Refs'))[,.(
    refID,PMID=eprint,Author=sapply(Author,authize),Year,Title,
    Choosing_Wisely=ifelse(Choosing_Wisely,"&#10004",""))][
      order(Author,Year)]
  output$Refs <- DT::renderDataTable({
    datatable(refsdt,
              extensions = 'Buttons',selection = 'single',
              # class = 'cell-border strip hover',
              filter='top',rownames=FALSE,escape=F,
              options = list(
                # stateSave=TRUE,
                dom = 'Blfrtip',
                buttons = c('copy', 'csv', 'pdf', 'print'), # excel crashes in my setup)
                pageLength = nrow(refsdt)
              )) %>% formatStyle("refID", cursor = 'pointer')
  }) # end renderDT

  
  # create refs proxy ####
  refsProxy <- DT::dataTableProxy('Refs')
  # observe refs selected and move to single ref panel ####
  observeEvent(input$Refs_rows_selected,{
    detailinfo$refid <- refsdt[input$Refs_rows_selected,refID]
    # showModal(modalDialog(title = detailinfo$refid))
    #   input$Refs_rows_selected,ifelse(Choosing_Wisely,"Choosing Wisely &#10004","")]))
    updateTabsetPanel(session, 'Main',selected = 'refdata')
  })
  
  ## SINGLE REF UI ####
  output$singleref=renderUI(
    if(!isTruthy(detailinfo$refid))
      h3('Please Select Reference') 
    else{
      fluidPage(
        fluidRow(
          column(8,htmlOutput('cit')),
          column(2,
                 actionButton('previousref',label="",icon=icon('hand-o-left')),
                 actionButton('nextref',label="",icon=icon('hand-o-right'))),
          # actionButton('transfercomm',"TransferComment")),
          column(2,htmlOutput('wise'))
        ),
        fluidRow(
          column(4,DT::dataTableOutput('affiliation')),
          column(2,DT::dataTableOutput('refInst')),
          column(1,DT::dataTableOutput('refDept')),
          column(2,DT::dataTableOutput('refDiv')),
          column(2,DT::dataTableOutput('refStudy'))
        ), #end FluidRow
        fluidRow(
          column(1,radioButtons('editmode',label = 'Edit Mode',c('Off','ON'),inline = TRUE)),
          column(2,radioButtons('seltestfu','After test row selection go to:',choices=c('Tests','Details'),inline = TRUE))
        ), #end FluidRow
        h4("Abstract"),
        htmlOutput("Abstract"),
        h4('Comments'),
        htmlOutput("Comment"),
        uiOutput('editbtns'),
        uiOutput('editref'),
        h4("Linked Tests"),
        uiOutput('linktestUI')
      )}) # end UI singleref
  
  # observe next and previous reference butons #####
  observeEvent(input$nextref,{
    refid <- isolate(input$Refs_rows_selected)
    refsProxy %>% selectRows(min(as.numeric(refid) + 1,nrow(refsdt)))
  })
  observeEvent(input$previousref,{
    refid <- isolate(input$Refs_rows_selected)
    refsProxy %>% selectRows(as.numeric(refid) - 1)
  })
  
  # outputs for view in single Reference panel ####
  output$cit = renderPrint({
    bib1 <- c(dbGetQuery(
      pool,paste0("SELECT * FROM Refs WHERE refID = ",detailinfo$refid,";")),list(key=""))
    print(as.BibEntry(
      setNames(bib1,tolower(names(bib1)))),
      .opts=list(bib.style='authoryear',first.inits=TRUE,style='html'))}) # previously selbib()
  # this one is for Details panel
  output$citation = renderPrint({
    bib1 <- c(dbGetQuery(
      pool,paste0("SELECT * FROM Refs WHERE refID = ",detailinfo$refid,";")),list(key=""))
    print(as.BibEntry(
      setNames(bib1,tolower(names(bib1)))),
      .opts=list(bib.style='authoryear',first.inits=TRUE,style='html'))})
  output$wise <- renderPrint(HTML(refsdt[
    refID==as.numeric(detailinfo$refid),Choosing_Wisely]
    # ifelse(Choosing_Wisely,"Choosing Wisely &#10004","")]
  ))
  output$affiliation <- DT::renderDataTable(
    dbGetQuery(
      pool,paste(
        "SELECT Affiliation from RefAffiliations WHERE refID = ",detailinfo$refid,";")),
    options=list(dom='t',filter='none'),class='compact',rownames=FALSE
  )
  output$refInst <- DT::renderDataTable(
    dbGetQuery(pool,paste("SELECT Institution FROM Refs WHERE refID = ",detailinfo$refid,";")),
    options=list(dom='t',filter='none'),class='compact',rownames=FALSE 
  )
  output$refDept <- DT::renderDataTable(
    dbGetQuery(pool,paste("SELECT Department FROM Refs WHERE refID = ",detailinfo$refid,";")),
    options=list(dom='t',filter='none'),class='compact',rownames=FALSE
  )
  output$refDiv <- DT::renderDataTable(
    dbGetQuery(pool,paste("SELECT Division FROM Refs WHERE refID = ",detailinfo$refid,";")),
    options=list(dom='t',filter='none'),class='compact',rownames=FALSE)
  
  output$refStudy <- DT::renderDataTable(
    dbGetQuery(pool,paste(
      "SELECT Study_Type FROM StudyType WHERE studyID = (SELECT StudyTypeID FROM Refs WHERE refID = ",
      detailinfo$refid,");")),
    options=list(dom='t',filter='none'),class='compact',rownames=FALSE)
  
  output$Comment <- renderText(unlist(dbGetQuery(
    pool,paste0("SELECT Comment FROM Refs WHERE refID =",detailinfo$refid,";"))$Comment))
  
  output$Abstract <- renderText(unlist(dbGetQuery(
    pool,paste0("SELECT Abstract FROM Refs WHERE refID =",detailinfo$refid,";"))$Abstract))
  
  # create linkedtests table reactive #####
  # creates different linkedtestsR data.table, depending on the event triggering the reactive
  # each event will create a different tempeditlinktests table, which will be returned as linkedtestsR() in the end
  linkedtestsR <- eventReactive(c(
    input$Refs_rows_selected,
    input$TestSelect, #
    input$linkedrefs_rows_selected, #
    input$linkedtests2,
    input$doneeditlinkedtests
    # input$editmodelabutil
  ),{
    tempeditlinktests <- dbGetQuery(pool,paste0(
      "SELECT TestName, ",paste(LUfields[-16], collapse=", "),
      ", LUE.testID FROM TestNames JOIN LUE ON LUE.testID  = TestNames.TestID WHERE LUE.refID = ",
      detailinfo$refid,";"))
    if(input$editmode=='ON'){
      if(isolate(length(input$linkedtests2$data)))
      {
        tempeditlinktests <- hot_to_r(input$linkedtests2)
      }
      if(length(input$linkedtests2$changes$event))
        if(input$linkedtests2$changes$event=='afterCreateRow'){
          
          # if(!input$linkedtests2$params$rDataDim[[1]]) # if empty table, create NA row
          # tempeditlinktests<-tempeditlinktests,list(utilID=NA),fill=T)
          # if(any(tempeditlinktests[,is.na(utilID)]))
          # print(max(LabUtilDb$LUE$utilID,na.rm=T))
          # tempeditlinktests[is.na(utilID),
          #                  utilID:=as.integer(
          #                    max(max(tempeditlinktests$utilID,na.rm=T),
          #                        max(LabUtilDb$LUE$utilID,na.rm=T),na.rm=T)+1L)]
          # tempeditlinktests[is.na(References),`:=`(
          #   References=as.integer(detailinfo$refid),
          #   # References=unique(na.omit(tempeditlinktests$References))[1],
          #   `Last Modified by`=user$name,
          #   `Date modified` = as.character(lubridate::now())
          # )]
        } # end response to createRow
      # blanktest <- tempeditlinktests[!is.na(TestName),which=T]
      # if(length(blanktest))
      # tempeditlinktests[blanktest,Test:=as.integer(sapply(TestName,function(x) Test2testid(x)))
      # LabUtilDb$TestNames[TEST==tempeditlinktests[blanktest[x],TEST],testID])
      # ]
    } # end input editmode == ON
    tempeditlinktests
  }) # end linkedtestsR reactive
  #   
  # create linkedtests1 proxy #######
  linkedtestsProxy <- DT::dataTableProxy('linkedtests1',session)
  #   ## render linkedtests table ######
  observeEvent(input$editmode,{
    if(input$editmode=='Off'){
      output$linkedtests1 <- DT::renderDataTable(
        # linkedtestsR()[,c("TEST",colnames(LabUtilDb$LUE)[-c(1,13:15)]),with=F],
        linkedtestsR(),
        selection='single',extensions = 'Buttons',rownames=FALSE,
        options = list(
          dom = 'Blfrtip',
          buttons = c('copy', 'csv', 'pdf', 'print') # excel crashes in my setup)
        ))
      output$linktestUI <- renderUI(DT::dataTableOutput('linkedtests1'))
      output$editbtns <- renderUI(h5(""))
    }else{ # input$editmode = ON
      if(!user$edit){
        showModal(modalDialog(title=paste("Dear",user$name),"Editing not allowed without a valid login"))
        updateRadioButtons(session,'editmode',selected = 'Off')
        return()
      }
      output$editbtns <- renderUI(
        fluidRow(
          column(3,selectInput(
            'editRefField',NA,
            choices = c("Edit reference field:",inputFields$name))),
          actionButton('addnewlinktest','Add new test to reference'),
          actionButton('doneeditlinkedtests','Save linked tests')
        ))
      output$linktestUI <- renderUI(rHandsontableOutput('linkedtests2'))
      
      # print(tempeditlinktests[,.(utilID,TEST,Test,References)])
      output$linkedtests2 <- renderRHandsontable({
        rhandsontable(linkedtestsR(),
                      height = 900
                      ,fillHandle = list(direction='vertical', autoInsertRow=FALSE)
        ) %>%
          hot_context_menu(allowRowEdit = FALSE, allowColEdit = FALSE) %>%
          hot_cols(manualColumnResize = TRUE) %>%
          hot_col(
            col='TestName',type='dropdown',source = sort(testdb$TestName),strict=TRUE)
      }) # end  linkedtests2 rhansdontable output
    } # end if edit mode = ON
    #### observe done editing linked tests #####
    observeEvent(input$doneeditlinkedtests,{
      if(input$editmode=='ON') {
        
        # print(linkedtestsR())
        # set(LabUtilDb$LUE,
        #     i=LabUtilDb$LUE[utilID%in%linkedtestsR()$utilID,which=T],
        #     j=intersect(colnames(linkedtestsR()),
        #                 colnames(LabUtilDb$LUE)),
        #     value = linkedtestsR()[,intersect(colnames(linkedtestsR()),
        #                                       colnames(LabUtilDb$LUE)),with=F])
        # if(!length(LabUtilDb$LUE[utilID%in%linkedtestsR()$utilID,which=T])){
        #   print('empty')
        # 
        #   LabUtilDb$LUE <- rbindlist(list(
        #     LabUtilDb$LUE,
        #     linkedtestsR()[,intersect(colnames(linkedtestsR()),
        #                               colnames(LabUtilDb$LUE)),with=F]),
        #     fill=TRUE)}
        # print(LabUtilDb$LUE[References%in%linkedtestsR()$References])
        # newlinkedtests <- isolate(linkedtestsR())
        # save(newlinkedtests,file=paste0("prelinkedtests/",
        #                                 linkedtestsR()$References[1],"_",user$name,"_",
        #                                 as.numeric(Sys.time()),'.rda'))
        # save(LabUtilDb,file='LabUtilDb.rda')
        updateRadioButtons(session,'editmode',selected = 'Off')
      }
    }) # end observe doneeditlinkedtests
  }) # end observe editmode
  #   
  ### react to selected test and go to Test Panel ####
  observeEvent(input$linkedtests1_rows_selected,{
    ltrs <- input$linkedtests1_rows_selected
    detailinfo$test <- linkedtestsR()[ltrs,'TestName']
    # showModal(modalDialog("Selected",detailinfo$test))
    updateSelectInput(session,inputId = 'TestSelect',selected = detailinfo$test)
    if(input$seltestfu=='Tests'){
      # showModal(modalDialog("Selected",testsel))
      updateTabsetPanel(session, 'Main',selected = 'testdata')
    }else{
      # updateTabsetPanel(session, 'Main',selected = 'testdata')
      # sr <- which(linkedrefsR()$References==detailinfo$refid)
      # linkedrefsProxy %>% selectRows(sr)
      updateTabsetPanel(session, 'Main',selected = 'details')
    }
  }) #end observe linkedtests_rows_selected
  #   
  # VIEW BY TEST PANEL ####
  # seltestidR <- reactive(LabUtilDb$TestNames[TEST==input$TestSelect,testID])
  output$testname <- renderTable(testdb[TestName==detailinfo$test,.( # this is for the view by test panel # input$TestSelect
    TestName, LOINC=LOINC_temp,Comment)]
  )
  output$testname2 <- renderTable(testdb[TestName==detailinfo$test,.( # this is for the details panel
    TestName, LOINC=LOINC_temp,Comment)]
  )
  #   
  # create linkedrefs reactive  #####
  linkedrefsR <- reactive(as.data.table(
    dbGetQuery(pool,paste0('SELECT Refs.*, LUE.* FROM Refs JOIN LUE ON LUE.refID=Refs.refID WHERE LUE.testID = (
                           SELECT testID FROM TestNames WHERE TestName = "',detailinfo$test,'");')))[
                             ,`:=`(Author=sapply(Author,authize),
                                   PMID=sapply(eprint,pmidLink),
                                   `Choosing Wisely`=ifelse(Choosing_Wisely,"&#10004",""),
                                   URL=sapply(url,createLink))]
  )
  # observe TestSelect selectinput ####
  observeEvent(input$TestSelect,detailinfo$test <- input$TestSelect)
  
  # render linked references based on selected test #####
  observeEvent(c(
    input$maxchar,input$linkedrefs_rows_selected),{
      # showModal(modalDialog(title="Selected",linkedrefsR()[1]))
      output$linkedrefs <- DT::renderDataTable(
        linkedrefsR()[
          , c('refID',
              'Author','Year','PMID','URL','Choosing Wisely',
              LUfields[-16]),with=F],
        escape=FALSE,selection='single',extensions = 'Buttons',
        options = list(
          pageLength = 25,
          columnDefs = list(
            list(
              targets = c(2,7,8,10,12,14,15,17:20),
              render = DT::JS(
                "function(data, type, row, meta) {",
                sprintf("return type === 'display' && data.length > %s ?",input$maxchar),
                sprintf("'<span title=\"' + data + '\">' + data.substr(0, %s) + '...</span>' : data;",input$maxchar),
                "}")
            )),
          dom = 'Blfrtip',
          buttons = c('copy', 'csv', 'pdf', 'print') # excel crashes in my setup
        ))
    }) # end observe maxchar
  
  
  ### EDITING SINGLE REFERENCE PANEL ######
  observeEvent(input$editRefField,{
    infield <- input$editRefField
    if(infield != "Edit reference field:"){
      if(!user$edit){
        showModal(modalDialog(title=paste("Dear",user$name),"Editing not allowed without a valid login"))
        return()
      }
      output$editref <- renderUI({
        fluidPage(
          if(infield=='Choosing Wisely'){
            checkboxInput('fieldentry','Choosing Wisely?',
                          # value = LabUtilDb$References[refID==detailinfo$refid,Choosing_Wisely])
                          value = dbGetQuery(pool,paste0(
                            'SELECT Choosing_Wisely FROM Refs WHERE RefID = ',detailinfo$refid))$Choosing_Wisely
            )
          }else{
            if(infield %in% edfi$name){
              selectInput(
                'fieldentry',multiple=TRUE,
                label = paste('Add',infield),
                # choices=LabUtilDb[[edfi[input==infield,labufield]]][,2,with=F],
                choices = dbGetQuery(
                  pool,paste0(
                    'SELECT ',edfi[name==infield,lookfield],
                    ' FROM ',edfi[name==infield,looktable],
                    ' ORDER BY Sort;'))[[1]],
                selected = dbGetQuery(
                  pool,paste0(
                    'SELECT ',edfi[name==infield,lookfield],
                    ' FROM ',edfi[name==infield,looktable],
                    ' JOIN ',edfi[name==infield,sandtable],
                    ' ON ',edfi[name==infield,looktable],".",edfi[name==infield,lookidx],
                    ' = ',edfi[name==infield,sandtable],".",edfi[name==infield,sandlookfield],
                    ' WHERE ',edfi[name==infield,sandtable],'.',edfi[name==infield,sandreffield],'=',detailinfo$refid
                  ))
              )
              
              # 'SELECT Patient_Type FROM PatientType JOIN LabUE_PtTypes ON Patient_Type = PatientType_PtTypeID
              # WHERE LabUE_RefID = ',detailinfo$refid)
                          # selected = LabUtilDb$References[refID==detailinfo$refid,unlist(get(edfi[input==infield,reffield]))]
              # )
            }else{
              textAreaInput('fieldentry',paste('Edit',infield),
                            value = dbGetQuery(
                              pool,paste0(
                              'SELECT ',infield,' FROM Refs WHERE refID = ', 
                              detailinfo$refid
                              )),
                            # value = LabUtilDb$References[
                            #   refID==detailinfo$refid,
                            #   unlist(get(edfi[input==infield,reffield]))],
                            width='800%',rows=12)}
          },
          actionButton(inputId = 'donerefm','Done Editing')
        ) # end fluid page
      }) # end edit ref UI
    }else{output$editref <- renderUI(h1(""))}
  })
  
  ## response to done editing button ####
  observeEvent(input$donerefm,{
    infield <- isolate(input$editRefField)
    showModal(modalDialog(infield))
    # do nothing if there is no change in field
    if(setequal(
      input$fieldentry,
      unlist(dbGetQuery(pool,
                        paste0(
                          'SELECT ',infield,' FROM Refs WHERE refID = ',detailinfo$refid,';'))))
    ){
      # unlist(
      # LabUtilDb$References[refID==detailinfo$refid,get(edfi[input==infield,reffield])]))){
      updateSelectInput(session,'editRefField',selected = 'Edit reference field:')
    }else{
      showModal(modalDialog(title=paste(
        "Are you sure you want to modify field:",infield)
        ,HTML(
          paste(input$fieldentry,collapse='<br>')
        ),footer = tagList(
          modalButton("Cancel"),
          actionButton("refeditok", "OK")))
      )
      observeEvent(input$refeditok,{
        infield <- isolate(input$editRefField)
        fieldent <- input$fieldentry
        lister <- infield %in% c("Department","Institution","Division","Study Type")
        # editedref <- LabUtilDb$References[refID==detailinfo$refid,] # keep record of pre-change for each ref
        # save(editedref,
        #      file=paste("preeditedrefs/",detailinfo$refid,"_",user$name,"_",as.integer(Sys.time()),".rda"))
        if(lister){
          # LabUtilDb$References[refID==detailinfo$refid,edfi[input==infield,reffield]:=list(list(fieldent))]
        }else{
          # LabUtilDb$References[refID==detailinfo$refid,edfi[input==infield,reffield]:=unlist(fieldent)]
        }
        updateSelectInput(session,'editRefField',selected = 'Edit reference field:')
        removeModal()
        # save(LabUtilDb,
        #      file = '~/Dropbox/ACLPSLabUtil_Dev/LabUtilizationDatabase/LabUtilDb.rda')
        # 
        temp <- as.numeric(input$Refs_rows_selected)
        replaceData(refsProxy, LabUtilDb$References[,.(refID,PMID=eprint,Author=sapply(author,authize),Year=year,Title=title,
                                                       Choosing_Wisely=ifelse(Choosing_Wisely,"&#10004",""))][
                                                         order(Author,Year)], rownames = FALSE)
        refsProxy %>% selectRows(temp)
        # showModal(modalDialog(h3("Saved!")))
      }) # end refeditok observer
    }
  }) # end donerefm observer
  
  
  
  
  # Details UI   ########################
  output$entrydetails <- renderUI(
    if(is.na(detailinfo$refid) | is.na(detailinfo$test))
      h3('Please Select Test / Reference on "View by Test" tab')
    else{
      fluidPage(
        h4('Reference'),
        column(6,htmlOutput('citation')),
        column(3,tableOutput('testname2')),
        column(3,selectInput(
          'editdetailfield','Edit List Field',
          choices = c('None','ICD10','Patient Type'))),
        column(6,tableOutput('clindetails')),
        column(6,tableOutput(('ptdetails'))),
        uiOutput('editdetailUI'),
        DT::dataTableOutput('selref1')
      )}) # end entry details UI
  
  #### DETAILS OUTPUT #######
  
  # observe linkedrefs row selection #####
  observeEvent(input$linkedrefs_rows_selected,{
    detailinfo$refid <- linkedrefsR()[input$linkedrefs_rows_selected,refID]
    detailinfo$utilid <- linkedrefsR()[input$linkedrefs_rows_selected,utilID]
    # showModal(modalDialog(detailinfo$refid))
    updateTabsetPanel(session, 'Main',selected = 'details')
  }) # end observe linkedrefs_rows_selected
  
  # lrrs <- input$linkedrefs_rows_selected
  # utilid <- linkedrefsR()[lrrs,utilID]
  # refid <- linkedrefsR()[lrrs,References]
  
  # render detail table ####
  output$selref1 <- DT::renderDataTable({
    db <- linkedrefsR()[refID==detailinfo$refid,
                        c('Abstract','Comment',LUfields[-16]),with=F]
    # Fields <- colnames(db)
    db <- as.data.frame(t(db))
    setnames(db,'V1','Details')
    db},
    escape=FALSE,
    options=list(dom='t',style = 'vertical-align: top;',pageLength = 20),
    class='compact; row-border',
    rownames=TRUE,selection='none') # end output selref1
  
  # render other detail tables ####
  # output$clindetails <- renderTable(
  #   LabUtilDb$LUE[utilID==detailinfo$utilid,
  #                                   .(ICD10=tstrsplit(icd10,"\\|"))][,.(
  #                                     ICD10,Description=ifelse(is.na(ICD10)|ICD10=='NA',NA,icd_explain(ICD10)))])
  # output$ptdetails <- renderTable(
  #   LabUtilDb$LUE[utilID==detailinfo$utilid,
  #                                   .(`Patient Type`=tstrsplit(PtType,"\\|"))])
  output$ptdetails <- renderTable(
    dbGetQuery(pool, paste('SELECT Patient_Type FROM PatientType JOIN LabUE_PtTypes ON Patient_Type = PatientType_PtTypeID WHERE LabUE_RefID = ',detailinfo$refid))
  )
  
  # renderUI editlistfields ######
  observeEvent(input$editdetailfield,{
    output$editdetailUI <- renderUI({
      if(input$editdetailfield=="None") return()
      if(input$editdetailfield=='Patient Type'){
        fluidPage(
          selectInput('editpttype','Patient Type',choices = dbGetQuery(pool,'SELECT Patient_Type FROM PatientType ORDER by Sort;'),
                      multiple = TRUE,
                      # selected = LabUtilDb$LUE[utilID==detailinfo$utilid,
                      #                                            strsplit(PtType,"\\|")]),
                      selected = dbGetQuery(
                        pool,paste(
                          'SELECT Patient_Type 
                          FROM PatientType 
                          JOIN LabUE_PtTypes 
                          ON Patient_Type = PatientType_PtTypeID 
                          WHERE LabUE_RefID = ',
                          detailinfo$refid))),
          actionButton('detaildone',paste('Done editing',input$editdetailfield)))
      }else{
        icddt <<- icd_explain_table(icd10_map_cc$icd_name)
        output$icd10table <- DT::renderDataTable(icddt,server=T,selection='multiple')
        fluidPage(
          DT::dataTableOutput('icd10table'),
          actionButton('detaildone',paste('Done editing',input$editdetailfield))
        )
      }}) # end editdetailsUI
    #   observeEvent(input$detaildone,{
    #     if(input$editdetailfield=='Patient Type'){
    #       if(!length(input$editpttype)) { # pass if input is empty
    #         updateSelectInput(session,inputId = 'editdetailfield',selected='None')
    #         return()}
    #       LabUtilDb$LUE[utilID==detailinfo$utilid,PtType:=paste(input$editpttype,collapse='|')]
    #       save(LabUtilDb,file = 'LabUtilDb.rda')
    #       updateSelectInput(session,inputId = 'editdetailfield',selected='None')
    #       output$ptdetails <- renderTable(
    #         LabUtilDb$LUE[utilID==detailinfo$utilid,
    #                                         .(`Patient Type`=tstrsplit(PtType,"\\|"))])
    #     }else{
    #       if(is.null(input$icd10table_rows_selected)) {
    #         updateSelectInput(session,inputId ='editdetailfield',selected='None')
    #         return()}
    #       LabUtilDb$LUE[utilID==detailinfo$utilid,icd10:=paste(
    #         icddt$code[input$icd10table_rows_selected],collapse='|')]
    #       save(LabUtilDb,file = 'LabUtilDb.rda')
    #       updateSelectInput(session,inputId ='editdetailfield',selected='None')
    #       output$clindetails <- renderTable(
    #         LabUtilDb$LUE[utilID==detailinfo$utilid,
    #                                         .(ICD10=tstrsplit(icd10,"\\|"))][,.(
    #                                           ICD10,Description=ifelse(is.na(ICD10)|ICD10=='NA',NA,icd_explain(ICD10)))])
    #     }
    #   })
  }) # end editlistfields observer
  #   
  #   
  #   
    #################### SEARCH PANEL #######
    # search by PMID
    observeEvent(input$newrefid,{
      if(input$newrefid=="") return()
      updateSelectInput(session,'searchfield',selected = "UID:  UID")
      updateSelectInput(session,'search1',selected = input$newrefid)
      # newref = GetPubMedByID(input$newrefid,'pubmed')
      # if(length(newref)){
      #   output$newcit <- renderPrint(newref)
      #   output$newcitabs <- renderPrint(newref$abstract)
      # }
    })
    # initialize reactives
    retst <- reactiveValues()
    rescount <- reactiveValues(x=0)
    # observe search field
    observeEvent(input$search1,{
      if(nchar(input$search1)<4) return()
      # showModal(modalDialog(input$searchfield))
      retst$x <- 0
      rescount$x <- rentrez::entrez_search('pubmed',paste0(
        input$search1,"[",unlist(strsplit(input$searchfield,":"))[1],"]"),retmax=0)$count
      # output$seaRes <- renderPrint(searchRes)
    })
    observeEvent(input$savesearches,{
      dbWriteTable(
        pool,"SearchStrategies",
        value = data.frame(SearchStrategy=input$search1),append=TRUE,row.names=F)
      updateSelectInput(
        'savedsearches',
        choices = dbGetQuery(pool,'SELECT * FROM SearchStrategies')$SearchStrategy)
    })
    observeEvent(input$savedsearches,{
      updateTextInput(session,'search1',value = paste(input$savedsearches,collapse=' OR '))
    })
    # display buttons
    observeEvent(input$next10,{
      retst$x <- ifelse(retst$x + 9 > rescount$x,rescount$x,retst$x + 10)
      searchRes <- ReadPubMed(input$search1,database = 'PubMed',retmax=10,retstart=retst$x,field=input$searchfield)
    })
    observeEvent(input$previous10,{
      retst$x <- ifelse(retst$x-10>0,retst$x-10,0)
      searchRes <- ReadPubMed(input$search1,database = 'PubMed',retmax=10,retstart=retst$x,field=input$searchfield)
    })

    # prepare tables for display as reactives #####
    seares <- reactive({
      sr <- ReadPubMed(
        input$search1,database = 'PubMed',retmax=10,retstart=retst$x,
        field=unlist(strsplit(input$searchfield,":"))[1])
    })
    searesdt <- reactive({
      req(seares())
      curref <- na.omit(dbGetQuery(pool,'SELECT eprint FROM Refs'))
      as.data.table(as.data.frame(seares()))->dt
      dt[,`In db`:=sapply(dt$eprint,function(x){
        ifelse(x %in% curref$eprint,"&#10004","")
      })][order(`In db`)]
    })
    # output counts #####
    output$searcount <- renderText(paste(
      "Total Results:",rescount$x,"Showing",retst$x+1,"-",
      ifelse(retst$x + 9 > rescount$x,rescount$x,retst$x + 10)))
    output$selresUI <- renderUI(h3("Please Select Search Result"))

    ### output search result big table #####
    output$seaRes <- DT::renderDataTable({
      if(rescount$x==0) return()
      searesdt()[,.(
        `In db`,
        Citation=paste0(sapply(author,authize),", ",year,ifelse('month' %in% colnames(dt),paste0("(",month,")"),"")),
        Journal=paste0(journal,
                       ifelse('volume' %in% colnames(dt),paste0(", ",volume),""),
                       ifelse('pages'%in% colnames(dt),paste0(", p",pages),"")),
        Title.Abstract=paste("<b>",title,"</b>",abstract),
        Link=paste0(eprinttype,":",eprint)
      )]
    },rownames=FALSE,escape=FALSE,selection='single')

    ########## ADD REFERENCE PANEL ############
    observeEvent(input$seaRes_rows_selected,{
      sel <- input$seaRes_rows_selected
      output$selsearres <- renderPrint(as.BibEntry(searesdt()[sel]))
      if(searesdt()[sel,`In db`]=='&#10004')
        output$selresUI <- renderUI(fluidRow(h3('ALREADY IN DATABASE'),actionButton('goref',"Go")))
      else{
        bib <- as.BibEntry(searesdt()[sel]) # need to make it available to renderUI
        # bibsum <- rentrez::entrez_summary('pubmed',id=bib$eprint)
        bibxml <- rentrez::entrez_fetch('pubmed',id=bib$eprint,rettype="xml", parsed=TRUE)
        affiliations <- data.table(Affiliations=unique(XML::xpathSApply(bibxml,'//Author',function(x)
          XML::xmlValue(x[["AffiliationInfo"]][["Affiliation"]]))))

        output$affil <- renderTable(affiliations)
        # CREATE UI to EDIT THEN ADD REFERENCE ####
        output$selresUI <- renderUI(
          fluidPage(
            tableOutput('affil'),
            textInput('newreftitleI','Modify Title',width='300%',
                      value = bib$title),
            textInput('newrefauthI','Modify Authors',width='300%',
                      value=as.data.frame(searesdt())$author[sel]),
            textInput('newrefjournI','Modify Journal',width='300%',
                      value=as.data.frame(searesdt())$journal[sel]),
            column(6,
                   textAreaInput('newrefabstI','Modify Abstract',rows = 15,width='300%',
                                 value = bib$abstract)),
            fluidRow(column(6,textAreaInput('newrefcommI','Enter Comments',rows = 15,width='300%')),
                     column(3,textInput('newrefurlI','Enter additional links')),
                     # # DT::dataTableOutput('seaRes1'),
                     column(2,selectInput('newrefinstI',"Enter institution Type (s)",
                                          choices = dbGetQuery(pool,"SELECT Institution_Type FROM InstitutionType ORDER by Sort")
                                           , multiple = TRUE)),

                     column(2,selectInput('newrefdeptI',"Enter Department (s)",
                                          choices = dbGetQuery(pool,"SELECT Department FROM Departments ORDER by Sort"), multiple = TRUE)),
                     column(2,selectInput('newrefdivI',"Enter Division (s)",
                                          choices = dbGetQuery(pool,"SELECT Division FROM Divisions ORDER by Sort"),
                                          multiple = TRUE)),
                     column(2,selectInput('newrefstudyI',"Enter Study Type",
                                          choices = dbGetQuery(pool,"SELECT Study_Type FROM StudyType ORDER by Sort"), multiple = TRUE)),
                     column(1,checkboxInput('wiseI',label = 'Choosing Wisely'))
            ), # end fluidRow
            actionButton('showref',savebtnlabel),
            DT::dataTableOutput('newref1')
          )) # end selresUI
      } # end else
      updateTabsetPanel(session, 'Main',selected = 'newref')
    }) # end observeEvent seaRes_rows_selected

    ### go to ref #####
    observeEvent(input$goref,{
      # ind <- which(LabUtilDb$References[,.(Author=sapply(author,authize),year,eprint)][
      #   order(Author,year)]$eprint==searesdt()$eprint[input$seaRes_rows_selected])
      ind <- which(refsdt$PMID==searesdt()$eprint[input$seaRes_rows_selected])
      refsProxy %>% selectRows(ind)
      updateTabsetPanel(session, 'Main',selected = 'refdata')
    })

    # respond to Show Ref/Save Ref button ######
    savebtnlabel <- "Show Edited Reference"
    observeEvent(input$showref,{
      sel <- input$seaRes_rows_selected
      newrefid=dbGetQuery(pool,'SELECT MAX(refID)+1 from Refs')[[1]]
      # output$selsearres <- renderPrint(as.BibEntry(seares()[sel]))
      bib <- as.BibEntry(searesdt()[sel]) # need to make it available to renderUI
      newref <- as.data.table(as.data.frame(bib))
      newref[,`:=`(refID=newrefid,
                   author=input$newrefauthI,
                   title=input$newreftitleI,
                   journal=input$newrefjournI,
                   abstract=input$newrefabstI,
                   Comment=input$newrefcommI,
                   Institution=paste(input$newrefinstI,collapse="|"),
                   Department=paste(input$newrefdeptI,collapse="|"),
                   Division=paste(input$newrefdivI,collapse="|"),
                   Study=paste(input$newrefstudyI,collapse="|"),
                   Choosing_Wisely=input$wiseI,
                   url=input$newrefurlI
      )]
      if(savebtnlabel=="Show Edited Reference"){
        savebtnlabel <<- "Save Reference"
        updateActionButton(session,'showref',label="Save Reference")
        output$newref1 <- DT::renderDataTable(
          newref,
          rownames=FALSE,escape=FALSE,selection='none',
          options=list(dom='t',style = 'vertical-align: top;'),class='compact; row-border')
      }else{
        savebtnlabel <<- 'Show Edited Reference'
        updateActionButton(session,'showref',label='Show Edited Reference')
        dbWriteTable(pool,'Refs',newref,append=TRUE,row.names=FALSE)
        output$newref1 <- DT::renderDataTable(data.table(Result='Saved!'))
        detailinfo$refid <- newrefid
        # refsdt <<- LabUtilDb$References[,.(refID,PMID=eprint,Author=sapply(author,authize),Year=year,Title=title,
        #                                    Choosing_Wisely=ifelse(Choosing_Wisely,"&#10004",""))][
        #                                      order(Author,Year)]
        refsdt <<- as.data.table(dbReadTable(pool,'Refs'))[,.(
          refID,PMID=eprint,Author=sapply(Author,authize),Year,Title,
          Choosing_Wisely=ifelse(Choosing_Wisely,"&#10004",""))][
            order(Author,Year)]
        replaceData(refsProxy,
                    refsdt, rownames = FALSE)
      }
    }) # end observeEvent saveref

  ### QUIT APP ####
  observeEvent(input$close,{
    stopApp()  # stop shiny from button
  })
  # stop on browser window close
  session$onSessionEnded(function() {
    #### just for ts ####
    # source('~/ShinyApps/LabUtilDb/secrets.R')
    # Users <- data.table(dbReadTable(pool,'Users'))
    # Users <- Users[1:3]
    # dbWriteTable(pool,'Users',Users,overwrite=TRUE,row.names=FALSE)
    # poolClose(pool)
    # dbGetQuery(pool,'DELETE FROM Users WHERE UserID >=4 ')
    stopApp()
  })
   
}) # END SERVER



#########ui.R

# ui.R for LabUtilDb on AWS
# .libPaths('~/Dropbox/R_packages/library/')
# setwd('~/Dropbox/TryACLPSLabUtil/LabUtilizationDatabase/')
shinyUI(fluidPage(
  # Application title
  titlePanel("Laboratory Utilization Database"),
  tabsetPanel(id='Main',selected='User',
              tabPanel(value='chooseRef',title="Select Reference",
                       DT::dataTableOutput('Refs')
              ), # end Panel select refs
              tabPanel(value="refdata",title = "View by Reference",
                       uiOutput('singleref')
              ), # end panel ref data
              tabPanel(title = "View by Test",value='testdata',
                       fluidRow(
                         column(2,selectInput(
                           inputId = 'TestSelect','Select Test',
                           choices = testdb$TestName
                         ),tags$style(type='text/css', ".selectize-dropdown-content {max-height: 800px; }")),
                         column(6,tableOutput("testname")),
                         column(4,sliderInput(
                           width = '100%',inputId = 'maxchar',
                           "Max Characters for Comments",min = 0,max = 1000,value = 100,step=10))),
                       # verbatimTextOutput("LOINC"),
                       # verbatimTextOutput("testComment"),
                       h4("Linked References"),
                       DT::dataTableOutput("linkedrefs")
              ), # end panel test data
              tabPanel(title='Utilization Details',value='details',
                       uiOutput('entrydetails')
              ), # end tabpanel Details
              tabPanel(title='Search',value='search',
                       column(2,textInput('newrefid',"Search by Pubmed ID")),
                       column(3,returnTextInput('search1',"Search by Text")),
                       column(2,selectInput(
                         'searchfield','Search Field',
                         choices ={rentrez::entrez_db_searchable('pubmed')->x;paste0(names(x),':  ',lapply(x,"[[",2))}
                       )),
                       column(1,textOutput('searcount')),
                       column(1,actionButton('next10',"Next 10"),
                              actionButton('previous10',"Previous 10")),
                       column(2,selectInput('savedsearches',"Saved Searches",
                                            choices = dbGetQuery(pool,"SELECT * from SearchStrategies;"),multiple=TRUE)),
                       column(1,actionButton('savesearches','Save search strategy')),
                       htmlOutput('newcit'),
                       htmlOutput('newcitabs'),
                       DT::dataTableOutput('seaRes')
                       # htmlOutput('seaRes')
                       # DT::dataTableOutput('reflist')
              ), # end tabpanel Search
              tabPanel(title='Add Reference',value='newref',
                       htmlOutput('selsearres'),
                       htmlOutput('indb'),
                       uiOutput('selresUI')
              ), # end tabpanel newref
              tabPanel('User',tableOutput('user'),
                       actionButton('logout','Logout'),
                       actionButton('chpswd','Change Password'),
                       tags$button(
                         id = 'close',
                         type = "button",
                         class = "btn action-button",
                         onclick = "setTimeout(function(){window.close();},500);",  # close browser
                         "Close app"
                       ))
  ) # end tabset panel
)) # END UI
